{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/troycao/Library/Python/3.7/lib/python/site-packages/IPython/core/interactiveshell.py:2718: DtypeWarning: Columns (849,856,934,935,936,938,939,940,941,942,943,944,945,947,948,949,951,952,953,975,976,978,1008,1014,1029) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "124293\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "file_path = \"/Users/troycao/Documents/GitHub/MAST90106_Group-20/data/20200404_LWB_Client_Events_Month.csv\"\n",
    "\n",
    "content = pd.read_csv(file_path)\n",
    "print(len(content))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(124293, 1181)\n"
     ]
    }
   ],
   "source": [
    "print(content.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get The Selected Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(124293, 236)\n"
     ]
    }
   ],
   "source": [
    "selected_data = content.iloc[:, :236]\n",
    "print(selected_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "incident_catgry_event_description_unauthorised_restrictive_practi_piv\n",
      "incident_catgry_event_description_phone_call_from_carer_regarding_piv\n",
      "incident_catgry_event_description_jayden_absconded_from_school_piv\n",
      "incident_catgry_event_description_client_unwell_sent_to_hospital_piv\n",
      "incident_catgry_event_description_client_hit_other_client_on_the_piv\n",
      "incident_catgry_event_description_noticed_bruise_and_nail_mark_on_piv\n",
      "incident_catgry_event_description_restrictive_practices_medicatio_piv\n",
      "(124293, 229)\n"
     ]
    }
   ],
   "source": [
    "for item in keys:\n",
    "    if item.startswith(\"incident_catgry_event_description_\"):\n",
    "        print(item)\n",
    "        selected_data = selected_data.drop(item, axis=1)\n",
    "print(selected_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "236\n"
     ]
    }
   ],
   "source": [
    "keys = selected_data.keys()\n",
    "print(len(keys))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "229\n"
     ]
    }
   ],
   "source": [
    "# new keys\n",
    "new_keys = selected_data.keys()\n",
    "print(len(new_keys)) # 229"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61\n"
     ]
    }
   ],
   "source": [
    "incident_catgry_title = []\n",
    "for item in new_keys:\n",
    "    if item.startswith(\"incident_catgry_\"):\n",
    "        incident_catgry_title.append(item)\n",
    "print(len(incident_catgry_title))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_key_client_id</th>\n",
       "      <th>_key_occurreddate_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0000D172-EA88-432F-8235-9FAA00D29072</td>\n",
       "      <td>2019-04-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0000D172-EA88-432F-8235-9FAA00D29072</td>\n",
       "      <td>2019-05-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0000D172-EA88-432F-8235-9FAA00D29072</td>\n",
       "      <td>2019-06-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0000D172-EA88-432F-8235-9FAA00D29072</td>\n",
       "      <td>2019-07-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0000D172-EA88-432F-8235-9FAA00D29072</td>\n",
       "      <td>2019-08-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0000D172-EA88-432F-8235-9FAA00D29072</td>\n",
       "      <td>2019-09-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0000D172-EA88-432F-8235-9FAA00D29072</td>\n",
       "      <td>2019-10-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0000D172-EA88-432F-8235-9FAA00D29072</td>\n",
       "      <td>2019-11-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0000D172-EA88-432F-8235-9FAA00D29072</td>\n",
       "      <td>2019-12-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0000D172-EA88-432F-8235-9FAA00D29072</td>\n",
       "      <td>2020-01-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0000D172-EA88-432F-8235-9FAA00D29072</td>\n",
       "      <td>2020-02-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0000D172-EA88-432F-8235-9FAA00D29072</td>\n",
       "      <td>2020-03-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0001AD9C-808F-4468-A32D-AB0700E2F6E2</td>\n",
       "      <td>2019-11-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>000377E7-E2BE-E011-B4AF-B6A03279A8B3</td>\n",
       "      <td>2019-04-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0001AD9C-808F-4468-A32D-AB0700E2F6E2</td>\n",
       "      <td>2019-12-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0001AD9C-808F-4468-A32D-AB0700E2F6E2</td>\n",
       "      <td>2020-01-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>000377E7-E2BE-E011-B4AF-B6A03279A8B3</td>\n",
       "      <td>2019-05-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>000377E7-E2BE-E011-B4AF-B6A03279A8B3</td>\n",
       "      <td>2019-06-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>000377E7-E2BE-E011-B4AF-B6A03279A8B3</td>\n",
       "      <td>2019-07-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>000377E7-E2BE-E011-B4AF-B6A03279A8B3</td>\n",
       "      <td>2019-08-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>000377E7-E2BE-E011-B4AF-B6A03279A8B3</td>\n",
       "      <td>2019-09-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>000A27CC-6DEC-4BED-A21F-A10A00E3C375</td>\n",
       "      <td>2019-04-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>000377E7-E2BE-E011-B4AF-B6A03279A8B3</td>\n",
       "      <td>2019-10-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>000A27CC-6DEC-4BED-A21F-A10A00E3C375</td>\n",
       "      <td>2019-05-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>000377E7-E2BE-E011-B4AF-B6A03279A8B3</td>\n",
       "      <td>2019-11-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>000A27CC-6DEC-4BED-A21F-A10A00E3C375</td>\n",
       "      <td>2019-06-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>000377E7-E2BE-E011-B4AF-B6A03279A8B3</td>\n",
       "      <td>2019-12-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>000A27CC-6DEC-4BED-A21F-A10A00E3C375</td>\n",
       "      <td>2019-07-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>000377E7-E2BE-E011-B4AF-B6A03279A8B3</td>\n",
       "      <td>2020-01-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>000A27CC-6DEC-4BED-A21F-A10A00E3C375</td>\n",
       "      <td>2019-08-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124263</th>\n",
       "      <td>FFD43505-079D-465A-BA25-A4AB00EA8F27</td>\n",
       "      <td>2019-11-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124264</th>\n",
       "      <td>FFD43505-079D-465A-BA25-A4AB00EA8F27</td>\n",
       "      <td>2019-12-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124265</th>\n",
       "      <td>FFD43505-079D-465A-BA25-A4AB00EA8F27</td>\n",
       "      <td>2020-01-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124266</th>\n",
       "      <td>FFD43505-079D-465A-BA25-A4AB00EA8F27</td>\n",
       "      <td>2020-02-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124267</th>\n",
       "      <td>FFD43505-079D-465A-BA25-A4AB00EA8F27</td>\n",
       "      <td>2020-03-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124268</th>\n",
       "      <td>FFF01C46-DA5E-4F00-9B91-AB1400DEC6A4</td>\n",
       "      <td>2019-11-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124269</th>\n",
       "      <td>FFF01C46-DA5E-4F00-9B91-AB1400DEC6A4</td>\n",
       "      <td>2019-12-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124270</th>\n",
       "      <td>FFF01C46-DA5E-4F00-9B91-AB1400DEC6A4</td>\n",
       "      <td>2020-01-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124271</th>\n",
       "      <td>FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6</td>\n",
       "      <td>2019-04-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124272</th>\n",
       "      <td>FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6</td>\n",
       "      <td>2019-05-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124273</th>\n",
       "      <td>FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6</td>\n",
       "      <td>2019-06-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124274</th>\n",
       "      <td>FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6</td>\n",
       "      <td>2019-07-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124275</th>\n",
       "      <td>FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6</td>\n",
       "      <td>2019-08-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124276</th>\n",
       "      <td>FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6</td>\n",
       "      <td>2019-09-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124277</th>\n",
       "      <td>FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6</td>\n",
       "      <td>2019-10-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124278</th>\n",
       "      <td>FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6</td>\n",
       "      <td>2019-11-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124279</th>\n",
       "      <td>FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6</td>\n",
       "      <td>2019-12-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124280</th>\n",
       "      <td>FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6</td>\n",
       "      <td>2020-01-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124281</th>\n",
       "      <td>FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6</td>\n",
       "      <td>2020-02-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124282</th>\n",
       "      <td>FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6</td>\n",
       "      <td>2020-03-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124283</th>\n",
       "      <td>FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132</td>\n",
       "      <td>2019-04-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124284</th>\n",
       "      <td>FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132</td>\n",
       "      <td>2019-05-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124285</th>\n",
       "      <td>FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132</td>\n",
       "      <td>2019-06-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124286</th>\n",
       "      <td>FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132</td>\n",
       "      <td>2019-07-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124287</th>\n",
       "      <td>FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132</td>\n",
       "      <td>2019-08-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124288</th>\n",
       "      <td>FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132</td>\n",
       "      <td>2019-09-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124289</th>\n",
       "      <td>FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132</td>\n",
       "      <td>2019-10-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124290</th>\n",
       "      <td>FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132</td>\n",
       "      <td>2019-11-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124291</th>\n",
       "      <td>FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132</td>\n",
       "      <td>2019-12-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124292</th>\n",
       "      <td>FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132</td>\n",
       "      <td>2020-01-01T00:00:00.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>124293 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              _key_client_id _key_occurreddate_month\n",
       "0       0000D172-EA88-432F-8235-9FAA00D29072   2019-04-01T00:00:00.0\n",
       "1       0000D172-EA88-432F-8235-9FAA00D29072   2019-05-01T00:00:00.0\n",
       "2       0000D172-EA88-432F-8235-9FAA00D29072   2019-06-01T00:00:00.0\n",
       "3       0000D172-EA88-432F-8235-9FAA00D29072   2019-07-01T00:00:00.0\n",
       "4       0000D172-EA88-432F-8235-9FAA00D29072   2019-08-01T00:00:00.0\n",
       "5       0000D172-EA88-432F-8235-9FAA00D29072   2019-09-01T00:00:00.0\n",
       "6       0000D172-EA88-432F-8235-9FAA00D29072   2019-10-01T00:00:00.0\n",
       "7       0000D172-EA88-432F-8235-9FAA00D29072   2019-11-01T00:00:00.0\n",
       "8       0000D172-EA88-432F-8235-9FAA00D29072   2019-12-01T00:00:00.0\n",
       "9       0000D172-EA88-432F-8235-9FAA00D29072   2020-01-01T00:00:00.0\n",
       "10      0000D172-EA88-432F-8235-9FAA00D29072   2020-02-01T00:00:00.0\n",
       "11      0000D172-EA88-432F-8235-9FAA00D29072   2020-03-01T00:00:00.0\n",
       "12      0001AD9C-808F-4468-A32D-AB0700E2F6E2   2019-11-01T00:00:00.0\n",
       "13      000377E7-E2BE-E011-B4AF-B6A03279A8B3   2019-04-01T00:00:00.0\n",
       "14      0001AD9C-808F-4468-A32D-AB0700E2F6E2   2019-12-01T00:00:00.0\n",
       "15      0001AD9C-808F-4468-A32D-AB0700E2F6E2   2020-01-01T00:00:00.0\n",
       "16      000377E7-E2BE-E011-B4AF-B6A03279A8B3   2019-05-01T00:00:00.0\n",
       "17      000377E7-E2BE-E011-B4AF-B6A03279A8B3   2019-06-01T00:00:00.0\n",
       "18      000377E7-E2BE-E011-B4AF-B6A03279A8B3   2019-07-01T00:00:00.0\n",
       "19      000377E7-E2BE-E011-B4AF-B6A03279A8B3   2019-08-01T00:00:00.0\n",
       "20      000377E7-E2BE-E011-B4AF-B6A03279A8B3   2019-09-01T00:00:00.0\n",
       "21      000A27CC-6DEC-4BED-A21F-A10A00E3C375   2019-04-01T00:00:00.0\n",
       "22      000377E7-E2BE-E011-B4AF-B6A03279A8B3   2019-10-01T00:00:00.0\n",
       "23      000A27CC-6DEC-4BED-A21F-A10A00E3C375   2019-05-01T00:00:00.0\n",
       "24      000377E7-E2BE-E011-B4AF-B6A03279A8B3   2019-11-01T00:00:00.0\n",
       "25      000A27CC-6DEC-4BED-A21F-A10A00E3C375   2019-06-01T00:00:00.0\n",
       "26      000377E7-E2BE-E011-B4AF-B6A03279A8B3   2019-12-01T00:00:00.0\n",
       "27      000A27CC-6DEC-4BED-A21F-A10A00E3C375   2019-07-01T00:00:00.0\n",
       "28      000377E7-E2BE-E011-B4AF-B6A03279A8B3   2020-01-01T00:00:00.0\n",
       "29      000A27CC-6DEC-4BED-A21F-A10A00E3C375   2019-08-01T00:00:00.0\n",
       "...                                      ...                     ...\n",
       "124263  FFD43505-079D-465A-BA25-A4AB00EA8F27   2019-11-01T00:00:00.0\n",
       "124264  FFD43505-079D-465A-BA25-A4AB00EA8F27   2019-12-01T00:00:00.0\n",
       "124265  FFD43505-079D-465A-BA25-A4AB00EA8F27   2020-01-01T00:00:00.0\n",
       "124266  FFD43505-079D-465A-BA25-A4AB00EA8F27   2020-02-01T00:00:00.0\n",
       "124267  FFD43505-079D-465A-BA25-A4AB00EA8F27   2020-03-01T00:00:00.0\n",
       "124268  FFF01C46-DA5E-4F00-9B91-AB1400DEC6A4   2019-11-01T00:00:00.0\n",
       "124269  FFF01C46-DA5E-4F00-9B91-AB1400DEC6A4   2019-12-01T00:00:00.0\n",
       "124270  FFF01C46-DA5E-4F00-9B91-AB1400DEC6A4   2020-01-01T00:00:00.0\n",
       "124271  FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6   2019-04-01T00:00:00.0\n",
       "124272  FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6   2019-05-01T00:00:00.0\n",
       "124273  FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6   2019-06-01T00:00:00.0\n",
       "124274  FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6   2019-07-01T00:00:00.0\n",
       "124275  FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6   2019-08-01T00:00:00.0\n",
       "124276  FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6   2019-09-01T00:00:00.0\n",
       "124277  FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6   2019-10-01T00:00:00.0\n",
       "124278  FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6   2019-11-01T00:00:00.0\n",
       "124279  FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6   2019-12-01T00:00:00.0\n",
       "124280  FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6   2020-01-01T00:00:00.0\n",
       "124281  FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6   2020-02-01T00:00:00.0\n",
       "124282  FFFC53E9-CB2E-4F30-A3B7-AA1400F5BEF6   2020-03-01T00:00:00.0\n",
       "124283  FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132   2019-04-01T00:00:00.0\n",
       "124284  FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132   2019-05-01T00:00:00.0\n",
       "124285  FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132   2019-06-01T00:00:00.0\n",
       "124286  FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132   2019-07-01T00:00:00.0\n",
       "124287  FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132   2019-08-01T00:00:00.0\n",
       "124288  FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132   2019-09-01T00:00:00.0\n",
       "124289  FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132   2019-10-01T00:00:00.0\n",
       "124290  FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132   2019-11-01T00:00:00.0\n",
       "124291  FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132   2019-12-01T00:00:00.0\n",
       "124292  FFFF7C4D-F6DD-46D0-A9C0-AE3C2DC51132   2020-01-01T00:00:00.0\n",
       "\n",
       "[124293 rows x 2 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_data.iloc[:, :2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Categorize The Incident & Summarize the Information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(124293, 6)\n"
     ]
    }
   ],
   "source": [
    "# care_concern \n",
    "care_concern_list = []\n",
    "for item in keys:\n",
    "    if item.startswith(\"incident_catgry_care_concern_\"):\n",
    "        care_concern_list.append(item)\n",
    "care_concern_data = selected_data[care_concern_list]\n",
    "print(care_concern_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "care_concern_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(care_concern_data.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True     123674\n",
      "False       619\n",
      "Name: judge, dtype: int64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n"
     ]
    }
   ],
   "source": [
    "# justify whether total num in 'incident_catgry_care_concern_piv'\n",
    "care_concern_data[\"judge\"] = (care_concern_data['incident_catgry_care_concern_piv'] == care_concern_data['incident_catgry_care_concern_significant_wa_jurisdiction_piv'] + \n",
    "     care_concern_data[\"incident_catgry_care_concern_minor_event_description_piv\"] + care_concern_data[\"incident_catgry_care_concern_significant_event_descri_piv\"] + care_concern_data[\"incident_catgry_care_concern_minor_nsw_jurisdiction_categ_piv\"] + care_concern_data[\"incident_catgry_care_concern_minor_nsw_jurisdiction_category_piv\"])\n",
    "\n",
    "print(care_concern_data.judge.value_counts())\n",
    "# True\n",
    "# So Here we will take the care_concern_data[\"incident_catgry_care_concern_piv\"]."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count    124293.000000\n",
      "mean          0.018939\n",
      "std           0.279870\n",
      "min           0.000000\n",
      "25%           0.000000\n",
      "50%           0.000000\n",
      "75%           0.000000\n",
      "max          32.000000\n",
      "Name: incident_catgry_medication_piv, dtype: float64\n",
      "count    124293.000000\n",
      "mean          0.016871\n",
      "std           0.162835\n",
      "min           0.000000\n",
      "25%           0.000000\n",
      "50%           0.000000\n",
      "75%           0.000000\n",
      "max          14.000000\n",
      "Name: incident_catgry_medical_piv, dtype: float64\n",
      "count    124293.000000\n",
      "mean          0.001633\n",
      "std           0.053418\n",
      "min           0.000000\n",
      "25%           0.000000\n",
      "50%           0.000000\n",
      "75%           0.000000\n",
      "max           7.000000\n",
      "Name: incident_catgry__piv, dtype: float64\n",
      "count    124293.000000\n",
      "mean          0.000185\n",
      "std           0.013602\n",
      "min           0.000000\n",
      "25%           0.000000\n",
      "50%           0.000000\n",
      "75%           0.000000\n",
      "max           1.000000\n",
      "Name: incident_catgry_death_piv, dtype: float64\n",
      "count    124293.000000\n",
      "mean          0.003411\n",
      "std           0.068930\n",
      "min           0.000000\n",
      "25%           0.000000\n",
      "50%           0.000000\n",
      "75%           0.000000\n",
      "max           4.000000\n",
      "Name: incident_catgry_property_and_vehicles_piv, dtype: float64\n",
      "count    124293.000000\n",
      "mean          0.009108\n",
      "std           0.134357\n",
      "min           0.000000\n",
      "25%           0.000000\n",
      "50%           0.000000\n",
      "75%           0.000000\n",
      "max          11.000000\n",
      "Name: incident_catgry_physical_and_sexual_assault_piv, dtype: float64\n",
      "count    124293.000000\n",
      "mean          0.009486\n",
      "std           0.265688\n",
      "min           0.000000\n",
      "25%           0.000000\n",
      "50%           0.000000\n",
      "75%           0.000000\n",
      "max          33.000000\n",
      "Name: incident_catgry_client_missing_piv, dtype: float64\n",
      "count    124293.000000\n",
      "mean          0.000990\n",
      "std           0.033427\n",
      "min           0.000000\n",
      "25%           0.000000\n",
      "50%           0.000000\n",
      "75%           0.000000\n",
      "max           2.000000\n",
      "Name: incident_catgry_standard_of_care_soc_piv, dtype: float64\n",
      "count    124293.000000\n",
      "mean          0.000008\n",
      "std           0.002836\n",
      "min           0.000000\n",
      "25%           0.000000\n",
      "50%           0.000000\n",
      "75%           0.000000\n",
      "max           1.000000\n",
      "Name: incident_catgry_absconding_minor_significant_qld_jurisdi_piv, dtype: float64\n",
      "count    124293.000000\n",
      "mean          0.000241\n",
      "std           0.017017\n",
      "min           0.000000\n",
      "25%           0.000000\n",
      "50%           0.000000\n",
      "75%           0.000000\n",
      "max           2.000000\n",
      "Name: incident_catgry_emergency_situation_piv, dtype: float64\n",
      "count    124293.000000\n",
      "mean          0.009478\n",
      "std           0.362434\n",
      "min           0.000000\n",
      "25%           0.000000\n",
      "50%           0.000000\n",
      "75%           0.000000\n",
      "max          65.000000\n",
      "Name: incident_catgry_restrictive_practices_piv, dtype: float64\n",
      "count    124293.000000\n",
      "mean          0.000185\n",
      "std           0.018599\n",
      "min           0.000000\n",
      "25%           0.000000\n",
      "50%           0.000000\n",
      "75%           0.000000\n",
      "max           4.000000\n",
      "Name: incident_catgry_media_piv, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# catgry only have one attributes\n",
    "\n",
    "print(selected_data[\"incident_catgry_medication_piv\"].describe())\n",
    "print(selected_data[\"incident_catgry_medical_piv\"].describe())\n",
    "print(selected_data[\"incident_catgry__piv\"].describe())\n",
    "print(selected_data[\"incident_catgry_death_piv\"].describe())\n",
    "print(selected_data[\"incident_catgry_property_and_vehicles_piv\"].describe())\n",
    "print(selected_data[\"incident_catgry_physical_and_sexual_assault_piv\"].describe())\n",
    "print(selected_data[\"incident_catgry_client_missing_piv\"].describe())\n",
    "print(selected_data[\"incident_catgry_standard_of_care_soc_piv\"].describe())\n",
    "print(selected_data[\"incident_catgry_absconding_minor_significant_qld_jurisdi_piv\"].describe())\n",
    "print(selected_data[\"incident_catgry_emergency_situation_piv\"].describe())\n",
    "print(selected_data[\"incident_catgry_restrictive_practices_piv\"].describe())\n",
    "print(selected_data[\"incident_catgry_media_piv\"].describe())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(124293, 2)\n"
     ]
    }
   ],
   "source": [
    "# Drug data\n",
    "drug_list = []\n",
    "for item in keys:\n",
    "    if item.startswith(\"incident_catgry_drug\"):\n",
    "        drug_list.append(item)\n",
    "drug_data = selected_data[drug_list]\n",
    "print(drug_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       incident_catgry_drug_use_and_alcohol_significant_nsw_jurisdic_piv  \\\n",
      "count                                      124293.000000                   \n",
      "mean                                            0.000016                   \n",
      "std                                             0.005673                   \n",
      "min                                             0.000000                   \n",
      "25%                                             0.000000                   \n",
      "50%                                             0.000000                   \n",
      "75%                                             0.000000                   \n",
      "max                                             2.000000                   \n",
      "\n",
      "       incident_catgry_drugs_alcohol_piv  \n",
      "count                      124293.000000  \n",
      "mean                            0.005527  \n",
      "std                             0.209999  \n",
      "min                             0.000000  \n",
      "25%                             0.000000  \n",
      "50%                             0.000000  \n",
      "75%                             0.000000  \n",
      "max                            34.000000  \n"
     ]
    }
   ],
   "source": [
    "print(drug_data.describe())\n",
    "# Here we only take the drug_data[\"incident_catgry_drugs_alcohol_piv\"]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(124293, 4)\n"
     ]
    }
   ],
   "source": [
    "# behavior\n",
    "behavior_list = []\n",
    "for item in keys:\n",
    "    if item.startswith(\"incident_catgry_behaviour\"):\n",
    "        behavior_list.append(item)\n",
    "behavior_data = selected_data[behavior_list]\n",
    "print(behavior_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       incident_catgry_behaviour_minor_behaviour_minor_piv  \\\n",
      "count                                      124293.000000     \n",
      "mean                                            0.000008     \n",
      "std                                             0.002836     \n",
      "min                                             0.000000     \n",
      "25%                                             0.000000     \n",
      "50%                                             0.000000     \n",
      "75%                                             0.000000     \n",
      "max                                             1.000000     \n",
      "\n",
      "       incident_catgry_behaviour_piv  \\\n",
      "count                  124293.000000   \n",
      "mean                        0.074694   \n",
      "std                         0.548023   \n",
      "min                         0.000000   \n",
      "25%                         0.000000   \n",
      "50%                         0.000000   \n",
      "75%                         0.000000   \n",
      "max                        26.000000   \n",
      "\n",
      "       incident_catgry_behaviour_and_property_damage_nsw_jurisdiction_piv  \\\n",
      "count                                      124293.000000                    \n",
      "mean                                            0.000008                    \n",
      "std                                             0.002836                    \n",
      "min                                             0.000000                    \n",
      "25%                                             0.000000                    \n",
      "50%                                             0.000000                    \n",
      "75%                                             0.000000                    \n",
      "max                                             1.000000                    \n",
      "\n",
      "       incident_catgry_behaviour_minor_behaviour_piv  \n",
      "count                                  124293.000000  \n",
      "mean                                        0.000016  \n",
      "std                                         0.004011  \n",
      "min                                         0.000000  \n",
      "25%                                         0.000000  \n",
      "50%                                         0.000000  \n",
      "75%                                         0.000000  \n",
      "max                                         1.000000  \n"
     ]
    }
   ],
   "source": [
    "print(behavior_data.describe()) # Therefore we only take behavior_data[\"incident_catgry_behaviour_piv\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(124293, 2)\n"
     ]
    }
   ],
   "source": [
    "# Client_wellbeing\n",
    "client_wellbeing_list = []\n",
    "for item in keys:\n",
    "    if item.startswith(\"incident_catgry_client_wellbeing\"):\n",
    "        client_wellbeing_list.append(item)\n",
    "client_wellbeing_data = selected_data[client_wellbeing_list]\n",
    "print(client_wellbeing_data.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       incident_catgry_client_wellbeing_piv  \\\n",
      "count                         124293.000000   \n",
      "mean                               0.015150   \n",
      "std                                0.157991   \n",
      "min                                0.000000   \n",
      "25%                                0.000000   \n",
      "50%                                0.000000   \n",
      "75%                                0.000000   \n",
      "max                               18.000000   \n",
      "\n",
      "       incident_catgry_client_wellbeing_minor_event_descript_piv  \n",
      "count                                      124293.000000          \n",
      "mean                                            0.000008          \n",
      "std                                             0.002836          \n",
      "min                                             0.000000          \n",
      "25%                                             0.000000          \n",
      "50%                                             0.000000          \n",
      "75%                                             0.000000          \n",
      "max                                             1.000000          \n"
     ]
    }
   ],
   "source": [
    "print(client_wellbeing_data.describe()) # take the client_wellbeing_data[\"incident_catgry_client_wellbeing_piv\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(124293, 21)\n"
     ]
    }
   ],
   "source": [
    "# offence Minor event\n",
    "Offence_Minor_list = []\n",
    "for item in keys:\n",
    "    if item.startswith(\"incident_catgry_offences_minor\"):\n",
    "        Offence_Minor_list.append(item)\n",
    "Offence_Minor_data = selected_data[Offence_Minor_list]\n",
    "print(Offence_Minor_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(Offence_Minor_data.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "Offence_Minor_data[\"minor_event_total\"] = Offence_Minor_data.sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count    124293.000000\n",
      "mean          0.001464\n",
      "std           0.052893\n",
      "min           0.000000\n",
      "25%           0.000000\n",
      "50%           0.000000\n",
      "75%           0.000000\n",
      "max           6.000000\n",
      "Name: minor_event_total, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(Offence_Minor_data[\"minor_event_total\"].describe()) # pick up Offence_Minor_data[\"minor_event_total\"] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(124293, 11)\n"
     ]
    }
   ],
   "source": [
    "# offence significant events\n",
    "Offence_significant_list = []\n",
    "for item in keys:\n",
    "    if item.startswith(\"incident_catgry_offences_significant\"):\n",
    "        Offence_significant_list.append(item)\n",
    "Offence_significant_data = selected_data[Offence_significant_list]\n",
    "print(Offence_significant_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(Offence_significant_data.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "Offence_significant_data[\"significant_event_total\"] = Offence_significant_data.sum(axis=1) # all store in Offence_significant_data[\"significant_event_total\"] \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count    124293.000000\n",
      "mean          0.000274\n",
      "std           0.019236\n",
      "min           0.000000\n",
      "25%           0.000000\n",
      "50%           0.000000\n",
      "75%           0.000000\n",
      "max           3.000000\n",
      "Name: significant_event_total, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(Offence_significant_data[\"significant_event_total\"].describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(124293, 3)\n"
     ]
    }
   ],
   "source": [
    "# offence critical events\n",
    "Offence_critical_list = []\n",
    "for item in keys:\n",
    "    if item.startswith(\"incident_catgry_offences_critical\"):\n",
    "        Offence_critical_list.append(item)\n",
    "Offence_critical_data = selected_data[Offence_critical_list]\n",
    "print(Offence_critical_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(Offence_critical_data.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "Offence_critical_data[\"critical_event_total\"] = Offence_critical_data.sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count    124293.000000\n",
      "mean          0.000105\n",
      "std           0.010985\n",
      "min           0.000000\n",
      "25%           0.000000\n",
      "50%           0.000000\n",
      "75%           0.000000\n",
      "max           2.000000\n",
      "Name: critical_event_total, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(Offence_critical_data[\"critical_event_total\"].describe()) ## all store in Offence_critical_data[\"critical_event_total\"] \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Now Summarize all the Offence event"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Offence_event = pd.concat([Offence_Minor_data[\"minor_event_total\"],Offence_significant_data[\"significant_event_total\"], Offence_critical_data[\"critical_event_total\"]], axis=1)\n",
    "       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(Offence_event)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Offence_event.loc[\"Total_num\"] = Offence_event.apply(lambda x: x.sum(), axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(Offence_event.loc[\"Total_num\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "label = [u\"minor_event\", u\"significant_event\", u\"critical_event\"]\n",
    "offence_total = Offence_event.loc[\"Total_num\"]\n",
    "plt.pie(offence_total, labels=label, autopct='%1.1f%%')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "\n",
    "sns.set(rc={'figure.figsize':(11, 4)})\n",
    "sns.set_style('whitegrid', {'axes.grid': False})\n",
    "\n",
    "Offence_event[\"minor_event_total\"].plot(linewidth=4).set(ylim=(0,7))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Offence_event[\"significant_event_total\"].plot(linewidth=4).set(ylim=(0,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Offence_event[\"critical_event_total\"].plot(linewidth=4).set(ylim=(0,3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Summarize all the Incident Category Information & Get the Response Variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(124293, 30)\n"
     ]
    }
   ],
   "source": [
    "incident_cat_list = [care_concern_data, selected_data[\"incident_catgry_medication_piv\"],\n",
    "                    selected_data[\"incident_catgry_medical_piv\"],selected_data[\"incident_catgry__piv\"], selected_data[\"incident_catgry_death_piv\"],\n",
    "                    selected_data[\"incident_catgry_property_and_vehicles_piv\"],selected_data[\"incident_catgry_physical_and_sexual_assault_piv\"],\n",
    "                    selected_data[\"incident_catgry_client_missing_piv\"],selected_data[\"incident_catgry_standard_of_care_soc_piv\"],\n",
    "                    selected_data[\"incident_catgry_absconding_minor_significant_qld_jurisdi_piv\"],selected_data[\"incident_catgry_emergency_situation_piv\"],\n",
    "                    selected_data[\"incident_catgry_restrictive_practices_piv\"], selected_data[\"incident_catgry_media_piv\"], drug_data,\n",
    "                    behavior_data, client_wellbeing_data, Offence_Minor_data[\"minor_event_total\"],\n",
    "                    Offence_significant_data[\"significant_event_total\"], Offence_critical_data[\"critical_event_total\"]]\n",
    "\n",
    "\n",
    "incident_event_cat = pd.concat(incident_cat_list, axis=1)\n",
    "print(incident_event_cat.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "incident_event_cat[\"Total_incident_count\"] = incident_event_cat.apply(lambda x: x.sum(), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count    124293.000000\n",
      "mean          1.168779\n",
      "std           1.028984\n",
      "min           1.000000\n",
      "25%           1.000000\n",
      "50%           1.000000\n",
      "75%           1.000000\n",
      "max          69.000000\n",
      "Name: Total_incident_count, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(incident_event_cat[\"Total_incident_count\"].describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "incident_event_data = pd.concat([selected_data['_key_client_id'],selected_data['_key_occurreddate_month'], incident_event_cat], axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(124293, 33)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "incident_event_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f95576ee908>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "incident_event_cat[\"Total_incident_count\"].plot(linewidth=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "incident_event_cat[\"response_variable\"] = incident_event_cat[\"Total_incident_count\"].apply(lambda x: 1 if x != 0 else 0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(incident_event_cat.response_variable.value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "incident_event_cat[\"response_variable\"].plot(linewidth=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "fig = plt.figure()\n",
    "ax1 = fig.add_subplot(111)\n",
    "ax1.set_title('Scatter Plot')\n",
    "x = np.arange(len(incident_event_cat[\"response_variable\"]))\n",
    "y = incident_event_cat[\"response_variable\"]\n",
    "\n",
    "ax1.scatter(x,y,c = 'r',marker = 'o')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "labels = [u\"Without Incidents\", u\"With Incidents\"]\n",
    "counts_summary = incident_event_cat.response_variable.value_counts()\n",
    "\n",
    "plt.pie(counts_summary, labels=labels, autopct='%1.1f%%')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "incident_event_data = incident_event_data.drop('judge', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(124293, 32)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "incident_event_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "incident_event_data.to_csv(\"dc_part_v2.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Processing the Incident Subcategory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "incident_subcatgry_list = []\n",
    "for item in keys:\n",
    "    if item.startswith(\"incident_subcatgry\"):\n",
    "        incident_subcatgry_list.append(item)\n",
    "subcat_data = selected_data[incident_subcatgry_list]\n",
    "print(subcat_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy import stats\n",
    "\n",
    "rho,pval=stats.spearmanr(subcat_data)\n",
    "print(rho)  ## From here we see independent relationships between subcategories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "subcat_data[\"incident_subcatgry_unknown_piv\"].plot(linewidth=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "subcat_data.to_csv(\"subcategory_feature.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Processing Diagnosistype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_keys = content.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "diag_cat_list = []\n",
    "for item in all_keys:\n",
    "    if item.startswith(\"diagnosiscat_\"):\n",
    "        diag_cat_list.append(item)\n",
    "diag_cat_data = content[diag_cat_list]\n",
    "print(diag_cat_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(diag_cat_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "diag_cat_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "diag_cat_data.to_csv(\"diag_cat.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "diag_type_list = []\n",
    "for item in all_keys:\n",
    "    if item.startswith(\"diagnosistype\") and item.endswith(\"_piv\"):\n",
    "        diag_type_list.append(item)\n",
    "diag_type_data = content[diag_type_list]\n",
    "print(len(diag_type_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "diag_type_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "diag_type_data.to_csv(\"dia_type.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
